{"version":3,"sources":["ThemeContext.js","StartView.js","TaskHistoryList.js","Stopwatch.js","App.js","index.js"],"names":["React","createContext","Provider","Consumer","ThemeContextProvider","props","useState","theme","setTheme","value","handleToggleTheme","prevState","children","StartView","startClicked","handleStartTask","taskInput","context","className","onChange","handleChange","placeholder","onClick","TaskHistoryList","taskHistoryList","map","task","key","id","date","hr","min","sec","removeTask","Stopwatch","theInterval","setTheInterval","times","setTimes","status","setStatus","setTaskHistoryList","displayTaskHistory","setDisplayTaskHistory","useEffect","localStorage","taskList","JSON","parse","getItem","updatedSec","updatedMin","updatedHr","start","run","setInterval","done","clearInterval","newTask","Date","toDateString","now","setItem","stringify","pause","resume","reset","taskHistoryStyles","toggleHistory","filteredList","filter","handleBackClick","class","displayBtns","length","App","view","setView","setTaskInput","lowerCaseTask","toLowerCase","capitalizedTaskInput","charAt","toUpperCase","slice","e","target","display","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c5f1436.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst {Provider, Consumer} = React.createContext();\r\n\r\n\r\n\r\nfunction ThemeContextProvider(props) {\r\n  const [theme, setTheme ] = useState(\"light\");\r\n\r\n\r\n\r\n  const handleToggleTheme = () => {\r\n     setTheme(prevState => (\r\n      prevState === \"light\" ? \"dark\" : \"light\"\r\n    ))\r\n  }\r\n\r\n\r\n  return (\r\n    <Provider value={{theme: theme, handleToggleTheme: handleToggleTheme}}>\r\n      {props.children}\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport {ThemeContextProvider, Consumer as ThemeContextConsumer};\r\n","import React, { useState, useEffect } from 'react';\r\nimport './globalStyles.css';\r\nimport {ThemeContextConsumer} from './ThemeContext';\r\n\r\n\r\n\r\n\r\nfunction StartView(props) {\r\n  const startClicked = () => {\r\n    props.handleStartTask(props.taskInput)\r\n  }\r\n\r\n  return (\r\n\r\n      <ThemeContextConsumer>\r\n        {context => (\r\n          <>\r\n            <div className=\"start-view\">\r\n              <input onChange={props.handleChange} value={props.taskInput} placeholder=\"What are you working on?\" className={`task-input task-input-${context.theme}-theme`}/>\r\n              <button onClick={startClicked} className={`btn start-btn start-btn-${context.theme}-theme`}>Start</button>\r\n            </div>\r\n            <footer className={`footer footer-${context.theme}-theme`}><p>&copy; Laura Ross 2020</p></footer>\r\n          </>\r\n        )}\r\n\r\n      </ThemeContextConsumer>\r\n\r\n  )\r\n}\r\n\r\nexport default StartView;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './stopwatch.css';\r\nimport './themeStyles.css';\r\nimport {ThemeContextConsumer} from './ThemeContext';\r\n\r\n\r\nfunction TaskHistoryList(props) {\r\n  return (\r\n    <ThemeContextConsumer>\r\n    {context => (\r\n      <ul className={`task-history-list task-history-list-${context.theme}-theme`}>\r\n      {props.taskHistoryList.map(task => (\r\n          <li key={task.id} className={`task task-${context.theme}-theme`}>\r\n            <span>{task.date}</span>\r\n            <span className=\"bold\">{task.task}</span>\r\n            <span>{`${task.hr}h ${task.min}m ${task.sec}s`}</span>\r\n            <div onClick={() => props.removeTask(task.id)} className=\"remove-btn\"><i className=\"far fa-trash-alt\"></i></div>\r\n          </li>\r\n          )\r\n        )\r\n      }\r\n      </ul>\r\n    )}\r\n    </ThemeContextConsumer>\r\n  )\r\n}\r\n\r\nexport default TaskHistoryList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './globalStyles.css';\r\nimport './themeStyles.css';\r\nimport './stopwatch.css';\r\nimport TaskHistoryList from './TaskHistoryList';\r\nimport {ThemeContextConsumer} from './ThemeContext';\r\n\r\n\r\nfunction Stopwatch(props) {\r\n  const [ theInterval, setTheInterval ] = useState();\r\n  const [ times, setTimes ] = useState({\r\n    sec: 0,\r\n    min: 0,\r\n    hr: 0\r\n  });\r\nconst [ status, setStatus ] = useState(\"started\");\r\nconst [ recordedTime, setRecordedTime ] = useState();\r\nconst [ taskHistoryList, setTaskHistoryList ] = useState([]);\r\nconst [ displayTaskHistory, setDisplayTaskHistory ] = useState(true);\r\n\r\nuseEffect(() => {\r\n\r\n  if(!localStorage.taskList) {\r\n    return;\r\n  } else {\r\n    const taskList = JSON.parse(localStorage.getItem(\"taskList\"));\r\n    setTaskHistoryList(taskList);\r\n  }\r\n}, [])\r\n\r\n\r\n\r\nlet updatedSec = times.sec;\r\nlet updatedMin = times.min;\r\nlet updatedHr = times.hr;\r\n\r\n\r\n  const start = () => {\r\n    run();\r\n    setTheInterval(setInterval(run, 1000));\r\n    setStatus(\"started\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    start();\r\n  }, [])\r\n\r\n\r\n  const run = () => {\r\n\r\n    if(updatedMin === 60) {\r\n      updatedHr++;\r\n      updatedMin = 0;\r\n    }\r\n\r\n    if(updatedSec === 60) {\r\n      updatedMin++;\r\n      updatedSec = 0;\r\n    }\r\n\r\n\r\n    updatedSec++;\r\n    return setTimes({sec: updatedSec, min: updatedMin, hr: updatedHr})\r\n  }\r\n\r\n\r\n  const done = () => {\r\n    clearInterval(theInterval);\r\n    let newTask = {\r\n      task: props.taskInput,\r\n      date: new Date().toDateString(),\r\n      sec: updatedSec,\r\n      min: updatedMin,\r\n      hr: updatedHr,\r\n      id: Date.now()\r\n    }\r\n    setTaskHistoryList([newTask, ...taskHistoryList]);\r\n    setStatus(\"done\");\r\n    localStorage.setItem(\"taskList\", JSON.stringify([newTask, ...taskHistoryList]));\r\n\r\n  }\r\n\r\n  const pause = () => {\r\n    clearInterval(theInterval);\r\n    setStatus(\"paused\");\r\n  }\r\n\r\n  const resume = () => {\r\n    run();\r\n    setTheInterval(setInterval(run, 1000));\r\n    setStatus(\"started\");\r\n  }\r\n\r\n  const reset = () => {\r\n    clearInterval(theInterval)\r\n    setTimes({\r\n      sec: 0,\r\n      min: 0,\r\n      hr: 0\r\n    })\r\n    setStatus(\"reset\");\r\n  }\r\n\r\n  let taskHistoryStyles = \"task-history-container\";\r\n  if(displayTaskHistory === false) {\r\n      taskHistoryStyles = \"task-history-container hide\";\r\n  }\r\n\r\n  const toggleHistory = () => {\r\n    setDisplayTaskHistory(!displayTaskHistory);\r\n  }\r\n\r\n  const removeTask = id => {\r\n    // filter by id of task and set setTaskHistoryList to filteredList\r\n    const filteredList = taskHistoryList.filter(task => id !== task.id);\r\n    setTaskHistoryList(filteredList);\r\n    localStorage.setItem(\"taskList\", filteredList)\r\n  }\r\n\r\n  const displayBtns = () => {\r\n    switch(status) {\r\n      case \"paused\":\r\n        return (\r\n          <ThemeContextConsumer>\r\n          {context => (\r\n            <>\r\n              <button className={`btn btn-${context.theme}-theme`} onClick={resume}>Resume</button>\r\n              <button className={`btn primary-btn-${context.theme}-theme`} onClick={reset}>Reset</button>\r\n            </>\r\n          )}\r\n          </ThemeContextConsumer>\r\n        )\r\n        break;\r\n\r\n        case \"reset\":\r\n          return (\r\n            <ThemeContextConsumer>\r\n            {context => (\r\n              <>\r\n                <button className={`btn btn-${context.theme}-theme`} onClick={start}>Start</button>\r\n              </>\r\n            )}\r\n            </ThemeContextConsumer>\r\n          )\r\n        break;\r\n\r\n        case \"done\":\r\n          return (\r\n            <ThemeContextConsumer>\r\n            {context => (\r\n              <>\r\n                <h3 className={`success-${context.theme}-theme`}>Congrats, you finished a thing!</h3>\r\n                <button onClick={props.handleBackClick} className={`btn btn-${context.theme}-theme`}> Start something else?</button>\r\n              </>\r\n            )}\r\n            </ThemeContextConsumer>\r\n          )\r\n        break;\r\n\r\n      default:\r\n      return (\r\n        <ThemeContextConsumer>\r\n        {context => (\r\n          <>\r\n            <button className={`btn btn-${context.theme}-theme`} onClick={pause}><span class=\"material-icons\">\r\npause\r\n</span> Pause</button>\r\n            <button className={`btn btn-${context.theme}-theme`} onClick={done}><span class=\"material-icons\">\r\ndone\r\n</span> Done</button>\r\n            <button className={`btn primary-btn-${context.theme}-theme`} onClick={reset}>Reset</button>\r\n          </>\r\n        )}\r\n        </ThemeContextConsumer>\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <ThemeContextConsumer>\r\n      {context => (\r\n        <div className=\"outer-container\">\r\n          <div className=\"top-btn-group\">\r\n            <button onClick={props.handleBackClick} className={`btn btn-${context.theme}-theme`}><span class=\"material-icons\">\r\nkeyboard_arrow_left\r\n</span> Back</button>\r\n            <button onClick={toggleHistory} className={`btn btn-${context.theme}-theme`}><span class=\"material-icons\">\r\nhistory_toggle_off\r\n</span> Toggle History</button>\r\n          </div>\r\n          <div className={`task-heading task-heading-${context.theme}-theme`}>\r\n            <h1>{props.taskInput}</h1>\r\n          </div>\r\n          <div className=\"stopwatch-container\">\r\n            <div className={`timer timer-${context.theme}-theme`}>\r\n              <h1>{times.hr < 10 ?\r\n                <span>0{times.hr}</span> :\r\n                <span>{times.hr}</span>\r\n              }:{times.min < 10 ?\r\n                <span>0{times.min}</span> :\r\n                <span>{times.min}</span>\r\n              }<span className=\"seconds\">{times.sec < 10 ?\r\n                <span>0{times.sec}</span> :\r\n              <span>{times.sec}</span>}</span></h1>\r\n            </div>\r\n          </div>\r\n          <div className=\"btn-group\">\r\n            {displayBtns()}\r\n          </div>\r\n\r\n          <section className={taskHistoryStyles}>\r\n            <h2 className={`task-history-heading-${context.theme}-theme`}>Completed Tasks</h2>\r\n            {\r\n              taskHistoryList.length < 1 ?\r\n              <p className={`task-history-message-${context.theme}-theme`}>You have no completed tasks.</p> :\r\n            <TaskHistoryList taskHistoryList={taskHistoryList}\r\n            removeTask={removeTask}\r\n            />\r\n            }\r\n          </section>\r\n        </div>\r\n      )}\r\n    </ThemeContextConsumer>\r\n  )\r\n}\r\n\r\nexport default Stopwatch;\r\n","import React, { useState, useEffect } from 'react'\nimport './globalStyles.css';\nimport './themeStyles.css';\nimport StartView from './StartView';\nimport Stopwatch from './Stopwatch';\nimport {ThemeContextConsumer} from './ThemeContext';\n\n\n\nfunction App() {\n  const [ view, setView ] = useState(\"startView\");\n  const [ taskInput, setTaskInput] = useState();\n\n\n\n  const handleStartTask = (taskInput) => {\n    setView(\"startClicked\");\n\n    if(!taskInput) {\n      setTaskInput(taskInput)\n    } else {\n      // Lowercase taskInput\n      const lowerCaseTask = taskInput.toLowerCase();\n\n      //Capitlize first letter of taskInput\n      const firstLetter = taskInput.charAt(0).toUpperCase();\n      // Combine to capitalize taskInput\n      const capitalizedTaskInput = firstLetter + lowerCaseTask.slice(1)\n\n      setTaskInput(capitalizedTaskInput);\n    }\n\n  }\n\n  const handleBackClick = () => {\n    setView(\"startView\");\n    setTaskInput()\n  }\n\n  const handleChange = e => {\n    setTaskInput(e.target.value)\n  }\n\n  const display = () => {\n    switch(view) {\n      case \"startClicked\":\n        return (\n          <Stopwatch taskInput={taskInput} handleBackClick={handleBackClick}\n          />\n        )\n        break;\n\n      default:\n      return (\n        <StartView\n        taskInput={taskInput}\n        handleChange={handleChange}\n        handleStartTask={handleStartTask}/>\n\n      )\n      break;\n        }\n  }\n\n  return (\n\n\n    <ThemeContextConsumer>\n      {context => (\n        <div className={`app app-${context.theme}-theme`}>\n        <nav className={`navbar navbar-${context.theme}-theme`}>\n          <div className=\"nav-left\">\n            <h1 className=\"logo\">Task Timer</h1>\n            <p className=\"nav-link\"><span className=\"down-arrow material-icons\">\n            keyboard_arrow_down\n            </span> How To\n            <div className={`how-to-box how-to-box-${context.theme}-theme`}>\n              <ul>\n                <li>To get started, enter a task you would like to time and click start. The app will automaticaly begin timing your progress.</li>\n                <li>Upon clicking done, your task will be added to your task history. You also have the option to remove a task.</li>\n                <li>All tasks are stored on your local machine for as long as you want. However, storage is limited.</li>\n                <li><strong>Don't refresh the page while you are in the middle of a task</strong> (even if it is paused) or else you will lose your time!</li>\n              </ul>\n            </div>\n            </p>\n          </div>\n          <div onClick={context.handleToggleTheme} className=\"toggle-mode\">\n            <span className={`material-icons material-icons-${context.theme}-theme theme-toggle-btn`}>\n            brightness_6\n            </span>\n          </div>\n        </nav>\n\n        {display()}\n      </div>\n      )}\n    </ThemeContextConsumer>\n\n\n  )\n}\n\n\n\nexport default App;\n//\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {ThemeContextProvider} from './ThemeContext';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeContextProvider>\n      <App />\n    </ThemeContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}